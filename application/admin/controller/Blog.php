<?php
/**
 * Created by PhpStorm.
 * User: Mikou
 * Date: 2018/9/9 0009
 * Time: 17:15
 */

namespace app\admin\controller;

use think\Controller;
use think\Db;
use think\Request;

class Blog extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $css = config('style_path.admin_css_path');
        $js = config('style_path.admin_js_path');
        $img = config('style_path.admin_img_path');
        $picture = config('style_path.admin_picture_path');
        $this->assign(array(
            'css' => $css,
            'js' => $js,
            'img' => $img,
            'picture' => $picture
        ));
    }

    public function index()
    {
        return view('admin@blog/index');
    }

    public function add()
    {
        return view('admin@blog/add');
    }

    public function edit()
    {
        return view('admin@blog/edit');
    }

    public function getList(Request $request)
    {
        $data = $request->post();
        $current_page = $data['current_page'];
        $pagesize = 10;
        $start = ($current_page - 1) * $pagesize;
        $list = Db::name('blog')
                ->alias('p1')
                ->field('p1.*,p2.name as category_name')
                ->join('category p2','p2.id = p1.category_id','left')
                ->order('p1.id desc')
                ->limit($start, $pagesize)
                ->select();
        foreach ($list as $k => $v) {
            $list[$k]['tag'] = $this->getTag($v['id']);
        }
        $count = Db::name('blog')->count();
        $allTag = $this->getAllTag();
        $this->ajaxReturnMsg(200, 'success', array('list' => $list, 'count' => ceil($count / $pagesize),'tag'=>$allTag));

    }

    public function insert(Request $request)
    {
        $input = $request->post();

        $data = json_decode($input['msg'], true);

        if (!isset($data['title']) || empty($data['title']) || !isset($data['category_id']) || empty($data['category_id'])  || !isset($data['content']) || empty($data['content']) || !isset($data['pic']) || empty($data['pic'])) {
            $this->ajaxReturnMsg(201, '参数错误', '');
        }

        $img = base64_image_content($data['pic'], 'upload/blog');
        if (!$img) {
            $this->ajaxReturnMsg(202, '上传失败', '');
        }
        $param = $data;
        $param['pic'] = config('base_url') . $img;
        $param['create_time'] = date('Y-m-d H:i:s', time());
        Db::name('blog')->insert($param);
        $this->ajaxReturnMsg(200, 'success', '');
    }

    public function update(Request $request)
    {
        $input = $request->post();

        $data = json_decode($input['msg'], true);

        if (!isset($data['title']) || empty($data['title'])  || !isset($data['content']) || empty($data['content']) || !isset($data['newpic'])) {
            $this->ajaxReturnMsg(201, '参数错误', '');
        }

        $param = array(
            'id' => $data['id'],
            'title' => $data['title'],
            'content' => $data['content'],
            'mackdown' => $data['mackdown'],
            'recommend' => $data['recommend']
        );

        if ($data['newpic']) {
            $img = base64_image_content($data['newpic'], 'upload/blog');
            if (!$img) {
                $this->ajaxReturnMsg(202, '上传失败', '');
            }
            $param['pic'] = config('base_url') . $img;
            // 删除原来的图片
            $len = strlen(Request::instance()->domain());
            $path = substr($data['pic'], $len + 1); // 图片路径
            if (file_exists($path)) {
                unlink($path);
            }
        }
        $param['update_time'] = date('Y-m-d H:i:s', time());
        Db::name('blog')->where('id', $param['id'])->update($param);
        $this->ajaxReturnMsg(200, 'success', '');
    }

    /**
     * Decription :添加标签
     * @author: Mikou.hu
     * Date: 2018/9/18
     */
    public function assignTag(Request $request)
    {
        $data = $request->post();
        if (!isset($data['blog_id']) || empty($data['blog_id']) || !isset($data['tag_id']) || empty($data['tag_id'])) {
            $this->ajaxReturnMsg(201, '缺少参数', '');
        }
        $falg = Db::name('blog_tag')->where('blog_id', $data['blog_id'])->where('tag_id', $data['tag_id'])->count();
        if ($falg) {
            $this->ajaxReturnMsg(201, '网络错误', '');
        }
        Db::name('blog_tag')->insert($data);
        $this->ajaxReturnMsg(200, 'success', '');
    }

    /**
     * Decription :删除标签
     * @author: Mikou.hu
     * Date: 2018/9/18
     */
    public function deleteTag(Request $request)
    {
        $data = $request->post();
        if (!isset($data['blog_id']) || empty($data['blog_id']) || !isset($data['tag_id']) || empty($data['tag_id'])) {
            $this->ajaxReturnMsg(201, '缺少参数', '');
        }
        $falg = Db::name('blog_tag')->where('blog_id', $data['blog_id'])->where('tag_id', $data['tag_id'])->count();
        if (!$falg) {
            $this->ajaxReturnMsg(201, '网络错误', '');
        }

        Db::name('blog_tag')->where('blog_id', $data['blog_id'])->where('tag_id', $data['tag_id'])->delete();
        $this->ajaxReturnMsg(200, 'success', '');

    }


    private function getAllTag()
    {
        return Db::name('tag')->field('id,name')->where('status',1)->select();
    }

    private function getTag($id)
    {
        if(empty($id)) return [];
        return Db::name('blog_tag')
            ->alias('p1')
            ->field('p2.id,p2.name')
            ->join('tag p2', 'p1.tag_id = p2.id','left')
            ->where('p1.blog_id',$id)
            ->where('p2.status',1)
            ->select();
    }


}